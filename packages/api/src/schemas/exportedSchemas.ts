// Generated by ts-to-zod
import { z } from 'zod';
import {
    SelectionRange,
    DocumentSymbol,
    SemanticTokenTypes,
    SemanticTokenModifiers,
    UniquenessLevel,
    MonikerKind,
    LSPAny,
    LSPObject,
    LSPArray,
    Command,
    InitializeParams,
    ClientCapabilities,
    InitializeResult,
    ServerCapabilities,
    Registration,
    RegistrationParams,
    NotebookDocument,
    NotebookCell,
    DidOpenNotebookDocumentParams,
    DidChangeNotebookDocumentParams,
    NotebookDocumentChangeEvent,
    NotebookCellArrayChange,
    TypeHierarchyItem,
    TypeHierarchySupertypesParams,
    TypeHierarchySubtypesParams,
    DocumentLink,
    CodeLens,
    InlayHint,
    InlayHintLabelPart,
    CompletionList,
    CompletionItem,
    CodeAction,
    WorkspaceSymbol,
    DidChangeConfigurationParams,
    ExecuteCommandParams,
} from './models';

export const arraySchema = z.array(z.any());

export const integerSchema = z.number();

export const uintegerSchema = z.number();

export const decimalSchema = z.number();

const messageSchema = z.object({
    jsonrpc: z.string(),
});

const requestMessageSchema = messageSchema.extend({
    id: z.union([integerSchema, z.string()]),
    method: z.string(),
    params: z.union([arraySchema, z.any()]).optional(),
});

const responseErrorSchema = z.object({
    code: integerSchema,
    message: z.string(),
    data: z
        .union([z.string(), z.number(), z.boolean(), arraySchema, z.any()])
        .optional()
        .nullable(),
});

const notificationMessageSchema = messageSchema.extend({
    method: z.string(),
    params: z.union([arraySchema, z.any()]).optional(),
});

const cancelParamsSchema = z.object({
    id: z.union([integerSchema, z.string()]),
});

const progressTokenSchema = z.union([integerSchema, z.string()]);

const hoverResultSchema = z.object({
    value: z.string(),
});

const documentUriSchema = z.string();

const uriSchema = z.string();

export const regularExpressionsClientCapabilitiesSchema = z.object({
    engine: z.string(),
    version: z.string().optional(),
});

const positionSchema = z.object({
    line: uintegerSchema,
    character: uintegerSchema,
});

export const positionEncodingKindSchema = z.string();

const rangeSchema = z.object({
    start: positionSchema,
    end: positionSchema,
});

const textDocumentItemSchema = z.object({
    uri: documentUriSchema,
    languageId: z.string(),
    version: integerSchema,
    text: z.string(),
});

const textDocumentIdentifierSchema = z.object({
    uri: documentUriSchema,
});

const versionedTextDocumentIdentifierSchema =
    textDocumentIdentifierSchema.extend({
        version: integerSchema,
    });

const optionalVersionedTextDocumentIdentifierSchema =
    textDocumentIdentifierSchema.extend({
        version: integerSchema.nullable(),
    });

export const textDocumentPositionParamsSchema = z.object({
    textDocument: textDocumentIdentifierSchema,
    position: positionSchema,
});

export const documentFilterSchema = z.object({
    language: z.string().optional(),
    scheme: z.string().optional(),
    pattern: z.string().optional(),
});

export const documentSelectorSchema = z.array(documentFilterSchema);

const textEditSchema = z.object({
    range: rangeSchema,
    newText: z.string(),
});

export const changeAnnotationSchema = z.object({
    label: z.string(),
    needsConfirmation: z.boolean().optional(),
    description: z.string().optional(),
});

export const changeAnnotationIdentifierSchema = z.string();

export const annotatedTextEditSchema = textEditSchema.extend({
    annotationId: changeAnnotationIdentifierSchema,
});

export const textDocumentEditSchema = z.object({
    textDocument: optionalVersionedTextDocumentIdentifierSchema,
    edits: z.array(z.union([textEditSchema, annotatedTextEditSchema])),
});

const locationSchema = z.object({
    uri: documentUriSchema,
    range: rangeSchema,
});

const locationLinkSchema = z.object({
    originSelectionRange: rangeSchema.optional(),
    targetUri: documentUriSchema,
    targetRange: rangeSchema,
    targetSelectionRange: rangeSchema,
});

export const diagnosticSeveritySchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
    z.literal(4),
]);

export const codeDescriptionSchema = z.object({
    href: uriSchema,
});

export const diagnosticTagSchema = z.union([z.literal(1), z.literal(2)]);

export const diagnosticRelatedInformationSchema = z.object({
    location: locationSchema,
    message: z.string(),
});

export const markupKindSchema = z.union([
    z.literal('plaintext'),
    z.literal('markdown'),
]);

export const markupContentSchema = z.object({
    kind: markupKindSchema,
    value: z.string(),
});

export const markdownClientCapabilitiesSchema = z.object({
    parser: z.string(),
    version: z.string().optional(),
    allowedTags: z.array(z.string()).optional(),
});

export const createFileOptionsSchema = z.object({
    overwrite: z.boolean().optional(),
    ignoreIfExists: z.boolean().optional(),
});

export const createFileSchema = z.object({
    kind: z.literal('create'),
    uri: documentUriSchema,
    options: createFileOptionsSchema.optional(),
    annotationId: changeAnnotationIdentifierSchema.optional(),
});

export const renameFileOptionsSchema = z.object({
    overwrite: z.boolean().optional(),
    ignoreIfExists: z.boolean().optional(),
});

export const renameFileSchema = z.object({
    kind: z.literal('rename'),
    oldUri: documentUriSchema,
    newUri: documentUriSchema,
    options: renameFileOptionsSchema.optional(),
    annotationId: changeAnnotationIdentifierSchema.optional(),
});

export const deleteFileOptionsSchema = z.object({
    recursive: z.boolean().optional(),
    ignoreIfNotExists: z.boolean().optional(),
});

export const deleteFileSchema = z.object({
    kind: z.literal('delete'),
    uri: documentUriSchema,
    options: deleteFileOptionsSchema.optional(),
    annotationId: changeAnnotationIdentifierSchema.optional(),
});

export const workspaceEditSchema = z.object({
    changes: z.record(z.array(textEditSchema)).optional(),
    documentChanges: z
        .union([
            z.array(textDocumentEditSchema),
            z.array(
                z.union([
                    textDocumentEditSchema,
                    createFileSchema,
                    renameFileSchema,
                    deleteFileSchema,
                ])
            ),
        ])
        .optional(),
    changeAnnotations: z.record(changeAnnotationSchema).optional(),
});

export const resourceOperationKindSchema = z.union([
    z.literal('create'),
    z.literal('rename'),
    z.literal('delete'),
]);

export const failureHandlingKindSchema = z.union([
    z.literal('abort'),
    z.literal('transactional'),
    z.literal('undo'),
    z.literal('textOnlyTransactional'),
]);

export const workDoneProgressBeginSchema = z.object({
    kind: z.literal('begin'),
    title: z.string(),
    cancellable: z.boolean().optional(),
    message: z.string().optional(),
    percentage: uintegerSchema.optional(),
});

export const workDoneProgressReportSchema = z.object({
    kind: z.literal('report'),
    cancellable: z.boolean().optional(),
    message: z.string().optional(),
    percentage: uintegerSchema.optional(),
});

export const workDoneProgressEndSchema = z.object({
    kind: z.literal('end'),
    message: z.string().optional(),
});

export const workDoneProgressParamsSchema = z.object({
    workDoneToken: progressTokenSchema.optional(),
});

export const workDoneProgressOptionsSchema = z.object({
    workDoneProgress: z.boolean().optional(),
});

export const partialResultParamsSchema = z.object({
    partialResultToken: progressTokenSchema.optional(),
});

export const traceValueSchema = z.union([
    z.literal('off'),
    z.literal('messages'),
    z.literal('verbose'),
]);

export const textDocumentSyncClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    willSave: z.boolean().optional(),
    willSaveWaitUntil: z.boolean().optional(),
    didSave: z.boolean().optional(),
});

export const hoverClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    contentFormat: z.array(markupKindSchema).optional(),
});

export const signatureHelpClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    signatureInformation: z
        .object({
            documentationFormat: z.array(markupKindSchema).optional(),
            parameterInformation: z
                .object({
                    labelOffsetSupport: z.boolean().optional(),
                })
                .optional(),
            activeParameterSupport: z.boolean().optional(),
        })
        .optional(),
    contextSupport: z.boolean().optional(),
});

export const declarationClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    linkSupport: z.boolean().optional(),
});

export const definitionClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    linkSupport: z.boolean().optional(),
});

export const typeDefinitionClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    linkSupport: z.boolean().optional(),
});

export const implementationClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    linkSupport: z.boolean().optional(),
});

export const referenceClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const documentHighlightClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const codeLensClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const documentLinkClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    tooltipSupport: z.boolean().optional(),
});

export const documentColorClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const documentFormattingClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const documentRangeFormattingClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const documentOnTypeFormattingClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const publishDiagnosticsClientCapabilitiesSchema = z.object({
    relatedInformation: z.boolean().optional(),
    tagSupport: z
        .object({
            valueSet: z.array(diagnosticTagSchema),
        })
        .optional(),
    versionSupport: z.boolean().optional(),
    codeDescriptionSupport: z.boolean().optional(),
    dataSupport: z.boolean().optional(),
});

export const selectionRangeClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const linkedEditingRangeClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

const callHierarchyClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

const monikerClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

const typeHierarchyClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const inlineValueClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const inlayHintClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    resolveSupport: z
        .object({
            properties: z.array(z.string()),
        })
        .optional(),
});

export const diagnosticClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    relatedDocumentSupport: z.boolean().optional(),
});

export const notebookDocumentSyncClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    executionSummarySupport: z.boolean().optional(),
});

export const didChangeConfigurationClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const didChangeWatchedFilesClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    relativePatternSupport: z.boolean().optional(),
});

export const executeCommandClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
});

export const semanticTokensWorkspaceClientCapabilitiesSchema = z.object({
    refreshSupport: z.boolean().optional(),
});

export const codeLensWorkspaceClientCapabilitiesSchema = z.object({
    refreshSupport: z.boolean().optional(),
});

export const inlineValueWorkspaceClientCapabilitiesSchema = z.object({
    refreshSupport: z.boolean().optional(),
});

export const inlayHintWorkspaceClientCapabilitiesSchema = z.object({
    refreshSupport: z.boolean().optional(),
});

export const diagnosticWorkspaceClientCapabilitiesSchema = z.object({
    refreshSupport: z.boolean().optional(),
});

export const showMessageRequestClientCapabilitiesSchema = z.object({
    messageActionItem: z
        .object({
            additionalPropertiesSupport: z.boolean().optional(),
        })
        .optional(),
});

export const showDocumentClientCapabilitiesSchema = z.object({
    support: z.boolean(),
});

export const initializeErrorCodesSchema = z.literal(1);

const initializeErrorSchema = z.object({
    retry: z.boolean(),
});

export const textDocumentSyncKindSchema = z.union([
    z.literal(0),
    z.literal(1),
    z.literal(2),
]);

export const completionOptionsSchema = workDoneProgressOptionsSchema.extend({
    triggerCharacters: z.array(z.string()).optional(),
    allCommitCharacters: z.array(z.string()).optional(),
    resolveProvider: z.boolean().optional(),
    completionItem: z
        .object({
            labelDetailsSupport: z.boolean().optional(),
        })
        .optional(),
});

export const hoverOptionsSchema = workDoneProgressOptionsSchema;

export const signatureHelpOptionsSchema = workDoneProgressOptionsSchema.extend({
    triggerCharacters: z.array(z.string()).optional(),
    retriggerCharacters: z.array(z.string()).optional(),
});

export const declarationOptionsSchema = workDoneProgressOptionsSchema;

export const definitionOptionsSchema = workDoneProgressOptionsSchema;

export const typeDefinitionOptionsSchema = workDoneProgressOptionsSchema;

export const implementationOptionsSchema = workDoneProgressOptionsSchema;

export const referenceOptionsSchema = workDoneProgressOptionsSchema;

export const documentHighlightOptionsSchema = workDoneProgressOptionsSchema;

export const documentSymbolOptionsSchema = workDoneProgressOptionsSchema.extend(
    {
        label: z.string().optional(),
    }
);

export const codeLensOptionsSchema = workDoneProgressOptionsSchema.extend({
    resolveProvider: z.boolean().optional(),
});

export const documentLinkOptionsSchema = workDoneProgressOptionsSchema.extend({
    resolveProvider: z.boolean().optional(),
});

export const documentColorOptionsSchema = workDoneProgressOptionsSchema;

export const documentFormattingOptionsSchema = workDoneProgressOptionsSchema;

export const documentRangeFormattingOptionsSchema =
    workDoneProgressOptionsSchema;

export const documentOnTypeFormattingOptionsSchema = z.object({
    firstTriggerCharacter: z.string(),
    moreTriggerCharacter: z.array(z.string()).optional(),
});

export const renameOptionsSchema = workDoneProgressOptionsSchema.extend({
    prepareProvider: z.boolean().optional(),
});

export const foldingRangeOptionsSchema = workDoneProgressOptionsSchema;

export const executeCommandOptionsSchema = workDoneProgressOptionsSchema.extend(
    {
        commands: z.array(z.string()),
    }
);

export const selectionRangeOptionsSchema = workDoneProgressOptionsSchema;

export const linkedEditingRangeOptionsSchema = workDoneProgressOptionsSchema;

export const callHierarchyOptionsSchema = workDoneProgressOptionsSchema;

export const monikerOptionsSchema = workDoneProgressOptionsSchema;

export const typeHierarchyOptionsSchema = workDoneProgressOptionsSchema;

export const inlineValueOptionsSchema = workDoneProgressOptionsSchema;

export const inlayHintOptionsSchema = workDoneProgressOptionsSchema.extend({
    resolveProvider: z.boolean().optional(),
});

export const diagnosticOptionsSchema = workDoneProgressOptionsSchema.extend({
    identifier: z.string().optional(),
    interFileDependencies: z.boolean(),
    workspaceDiagnostics: z.boolean(),
});

export const workspaceSymbolOptionsSchema =
    workDoneProgressOptionsSchema.extend({
        resolveProvider: z.boolean().optional(),
    });

export const workspaceFoldersServerCapabilitiesSchema = z.object({
    supported: z.boolean().optional(),
    changeNotifications: z.union([z.string(), z.boolean()]).optional(),
});

const initializedParamsSchema = z.object({});

export const staticRegistrationOptionsSchema = z.object({
    id: z.string().optional(),
});

export const textDocumentRegistrationOptionsSchema = z.object({
    documentSelector: documentSelectorSchema.nullable(),
});

export const unregistrationSchema = z.object({
    id: z.string(),
    method: z.string(),
});

export const unregistrationParamsSchema = z.object({
    unregisterations: z.array(unregistrationSchema),
});

const setTraceParamsSchema = z.object({
    value: traceValueSchema,
});

const logTraceParamsSchema = z.object({
    message: z.string(),
    verbose: z.string().optional(),
});

export const didOpenTextDocumentParamsSchema = z.object({
    textDocument: textDocumentItemSchema,
});

export const textDocumentChangeRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend({
        syncKind: textDocumentSyncKindSchema,
    });

export const textDocumentContentChangeEventSchema = z.union([
    z.object({
        range: rangeSchema,
        rangeLength: uintegerSchema.optional(),
        text: z.string(),
    }),
    z.object({
        text: z.string(),
    }),
]);

export const textDocumentSaveReasonSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
]);

export const saveOptionsSchema = z.object({
    includeText: z.boolean().optional(),
});

export const textDocumentSaveRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend({
        includeText: z.boolean().optional(),
    });

const didSaveTextDocumentParamsSchema = z.object({
    textDocument: textDocumentIdentifierSchema,
    text: z.string().optional(),
});

const didCloseTextDocumentParamsSchema = z.object({
    textDocument: textDocumentIdentifierSchema,
});

export const notebookCellKindSchema = z.union([z.literal(1), z.literal(2)]);

export const executionSummarySchema = z.object({
    executionOrder: uintegerSchema,
    success: z.boolean().optional(),
});

export const notebookDocumentFilterSchema = z.union([
    z.object({
        notebookType: z.string(),
        scheme: z.string().optional(),
        pattern: z.string().optional(),
    }),
    z.object({
        notebookType: z.string().optional(),
        scheme: z.string(),
        pattern: z.string().optional(),
    }),
    z.object({
        notebookType: z.string().optional(),
        scheme: z.string().optional(),
        pattern: z.string(),
    }),
]);

export const versionedNotebookDocumentIdentifierSchema = z.object({
    version: integerSchema,
    uri: uriSchema,
});

export const notebookDocumentIdentifierSchema = z.object({
    uri: uriSchema,
});

export const didCloseNotebookDocumentParamsSchema = z.object({
    notebookDocument: notebookDocumentIdentifierSchema,
    cellTextDocuments: z.array(textDocumentIdentifierSchema),
});

export const declarationParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const definitionRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(definitionOptionsSchema.shape);

export const definitionParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const typeDefinitionParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const implementationParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const referenceRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(referenceOptionsSchema.shape);

export const referenceContextSchema = z.object({
    includeDeclaration: z.boolean(),
});

export const callHierarchyPrepareParamsSchema =
    textDocumentPositionParamsSchema.extend(workDoneProgressParamsSchema.shape);

export const symbolKindSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
    z.literal(4),
    z.literal(5),
    z.literal(6),
    z.literal(7),
    z.literal(8),
    z.literal(9),
    z.literal(10),
    z.literal(11),
    z.literal(12),
    z.literal(13),
    z.literal(14),
    z.literal(15),
    z.literal(16),
    z.literal(17),
    z.literal(18),
    z.literal(19),
    z.literal(20),
    z.literal(21),
    z.literal(22),
    z.literal(23),
    z.literal(24),
    z.literal(25),
    z.literal(26),
]);

export const symbolTagSchema = z.literal(1);

export const typeHierarchyPrepareParamsSchema =
    textDocumentPositionParamsSchema.extend(workDoneProgressParamsSchema.shape);

export const documentHighlightRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentHighlightOptionsSchema.shape
    );

export const documentHighlightParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const documentHighlightKindSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
]);

export const documentLinkRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentLinkOptionsSchema.shape
    );

const documentLinkParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

export const hoverRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(hoverOptionsSchema.shape);

export const hoverParamsSchema = textDocumentPositionParamsSchema.extend(
    workDoneProgressParamsSchema.shape
);

const markedStringSchema = z.union([
    z.string(),
    z.object({
        language: z.string(),
        value: z.string(),
    }),
]);

export const codeLensRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(codeLensOptionsSchema.shape);

const codeLensParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

export const foldingRangeKindSchema = z.string();

export const foldingRangeParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

export const foldingRangeSchema = z.object({
    startLine: uintegerSchema,
    startCharacter: uintegerSchema.optional(),
    endLine: uintegerSchema,
    endCharacter: uintegerSchema.optional(),
    kind: foldingRangeKindSchema.optional(),
    collapsedText: z.string().optional(),
});

export const selectionRangeParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        positions: z.array(positionSchema),
    });

export const selectionRangeSchema: z.ZodSchema<SelectionRange> = z.lazy(() =>
    z.object({
        range: rangeSchema,
        parent: selectionRangeSchema.optional(),
    })
);

export const documentSymbolRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentSymbolOptionsSchema.shape
    );

export const documentSymbolParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

export const documentSymbolSchema: z.ZodSchema<DocumentSymbol> = z.lazy(() =>
    z.object({
        name: z.string(),
        detail: z.string().optional(),
        kind: symbolKindSchema,
        tags: z.array(symbolTagSchema).optional(),
        deprecated: z.boolean().optional(),
        range: rangeSchema,
        selectionRange: rangeSchema,
        children: z.array(documentSymbolSchema).optional(),
    })
);

export const symbolInformationSchema = z.object({
    name: z.string(),
    kind: symbolKindSchema,
    tags: z.array(symbolTagSchema).optional(),
    deprecated: z.boolean().optional(),
    location: locationSchema,
    containerName: z.string().optional(),
});

export const semanticTokenTypesSchema = z.nativeEnum(SemanticTokenTypes);

export const semanticTokenModifiersSchema = z.nativeEnum(
    SemanticTokenModifiers
);

export const tokenFormatSchema = z.literal('relative');

export const semanticTokensLegendSchema = z.object({
    tokenTypes: z.array(z.string()),
    tokenModifiers: z.array(z.string()),
});

export const semanticTokensParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

export const semanticTokensSchema = z.object({
    resultId: z.string().optional(),
    data: z.array(uintegerSchema),
});

export const semanticTokensPartialResultSchema = z.object({
    data: z.array(uintegerSchema),
});

export const semanticTokensDeltaParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        previousResultId: z.string(),
    });

export const semanticTokensEditSchema = z.object({
    start: uintegerSchema,
    deleteCount: uintegerSchema,
    data: z.array(uintegerSchema).optional(),
});

export const semanticTokensDeltaPartialResultSchema = z.object({
    edits: z.array(semanticTokensEditSchema),
});

export const semanticTokensRangeParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        range: rangeSchema,
    });

export const inlayHintParamsSchema = workDoneProgressParamsSchema.extend({
    textDocument: textDocumentIdentifierSchema,
    range: rangeSchema,
});

export const inlayHintKindSchema = z.union([z.literal(1), z.literal(2)]);

export const inlineValueContextSchema = z.object({
    frameId: integerSchema,
    stoppedLocation: rangeSchema,
});

export const inlineValueTextSchema = z.object({
    range: rangeSchema,
    text: z.string(),
});

export const inlineValueVariableLookupSchema = z.object({
    range: rangeSchema,
    variableName: z.string().optional(),
    caseSensitiveLookup: z.boolean(),
});

export const inlineValueEvaluatableExpressionSchema = z.object({
    range: rangeSchema,
    expression: z.string().optional(),
});

export const inlineValueSchema = z.union([
    inlineValueTextSchema,
    inlineValueVariableLookupSchema,
    inlineValueEvaluatableExpressionSchema,
]);

export const monikerParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape);

export const uniquenessLevelSchema = z.nativeEnum(UniquenessLevel);

export const monikerKindSchema = z.nativeEnum(MonikerKind);

export const monikerSchema = z.object({
    scheme: z.string(),
    identifier: z.string(),
    unique: uniquenessLevelSchema,
    kind: monikerKindSchema.optional(),
});

export const completionItemTagSchema = z.literal(1);

export const insertTextModeSchema = z.union([z.literal(1), z.literal(2)]);

export const completionItemKindSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
    z.literal(4),
    z.literal(5),
    z.literal(6),
    z.literal(7),
    z.literal(8),
    z.literal(9),
    z.literal(10),
    z.literal(11),
    z.literal(12),
    z.literal(13),
    z.literal(14),
    z.literal(15),
    z.literal(16),
    z.literal(17),
    z.literal(18),
    z.literal(19),
    z.literal(20),
    z.literal(21),
    z.literal(22),
    z.literal(23),
    z.literal(24),
    z.literal(25),
]);

export const completionRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(completionOptionsSchema.shape);

export const completionTriggerKindSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
]);

export const insertTextFormatSchema = z.union([z.literal(1), z.literal(2)]);

export const insertReplaceEditSchema = z.object({
    newText: z.string(),
    insert: rangeSchema,
    replace: rangeSchema,
});

export const completionItemLabelDetailsSchema = z.object({
    detail: z.string().optional(),
    description: z.string().optional(),
});

export const documentDiagnosticParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        identifier: z.string().optional(),
        previousResultId: z.string().optional(),
    });

export const documentDiagnosticReportKindSchema = z.union([
    z.literal('full'),
    z.literal('unchanged'),
]);

export const unchangedDocumentDiagnosticReportSchema = z.object({
    kind: z.any(),
    resultId: z.string(),
});

export const diagnosticServerCancellationDataSchema = z.object({
    retriggerRequest: z.boolean(),
});

export const previousResultIdSchema = z.object({
    uri: documentUriSchema,
    value: z.string(),
});

export const workspaceUnchangedDocumentDiagnosticReportSchema =
    unchangedDocumentDiagnosticReportSchema.extend({
        uri: documentUriSchema,
        version: integerSchema.nullable(),
    });

export const signatureHelpRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        signatureHelpOptionsSchema.shape
    );

export const signatureHelpTriggerKindSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
]);

export const parameterInformationSchema = z.object({
    label: z.union([z.string(), z.tuple([uintegerSchema, uintegerSchema])]),
    documentation: z.union([z.string(), markupContentSchema]).optional(),
});

export const codeActionKindSchema = z.string();

export const codeActionTriggerKindSchema = z.union([
    z.literal(1),
    z.literal(2),
]);

const documentColorParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
    });

const colorSchema = z.object({
    red: decimalSchema,
    green: decimalSchema,
    blue: decimalSchema,
    alpha: decimalSchema,
});

const colorPresentationParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        color: colorSchema,
        range: rangeSchema,
    });

const colorPresentationSchema = z.object({
    label: z.string(),
    textEdit: textEditSchema.optional(),
    additionalTextEdits: z.array(textEditSchema).optional(),
});

export const documentFormattingRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentFormattingOptionsSchema.shape
    );

const formattingOptionsSchema = z.object({
    tabSize: uintegerSchema,
    insertSpaces: z.boolean(),
    trimTrailingWhitespace: z.boolean().optional(),
    insertFinalNewline: z.boolean().optional(),
    trimFinalNewlines: z.boolean().optional(),
});

export const documentRangeFormattingRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentRangeFormattingOptionsSchema.shape
    );

const documentRangeFormattingParamsSchema = workDoneProgressParamsSchema.extend(
    {
        textDocument: textDocumentIdentifierSchema,
        range: rangeSchema,
        options: formattingOptionsSchema,
    }
);

export const documentOnTypeFormattingRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(
        documentOnTypeFormattingOptionsSchema.shape
    );

const documentOnTypeFormattingParamsSchema = z.object({
    textDocument: textDocumentIdentifierSchema,
    position: positionSchema,
    ch: z.string(),
    options: formattingOptionsSchema,
});

export const prepareSupportDefaultBehaviorSchema = z.literal(1);

export const renameRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(renameOptionsSchema.shape);

const renameParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend({
        newName: z.string(),
    });

export const prepareRenameParamsSchema =
    textDocumentPositionParamsSchema.extend(workDoneProgressParamsSchema.shape);

export const linkedEditingRangeParamsSchema =
    textDocumentPositionParamsSchema.extend(workDoneProgressParamsSchema.shape);

export const linkedEditingRangesSchema = z.object({
    ranges: z.array(rangeSchema),
    wordPattern: z.string().optional(),
});

export const workspaceSymbolRegistrationOptionsSchema =
    workspaceSymbolOptionsSchema;

const workspaceSymbolParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        query: z.string(),
    });

export const configurationItemSchema = z.object({
    scopeUri: uriSchema.optional(),
    section: z.string().optional(),
});

export const workspaceFolderSchema = z.object({
    uri: uriSchema,
    name: z.string(),
});

export const workspaceFoldersChangeEventSchema = z.object({
    added: z.array(workspaceFolderSchema),
    removed: z.array(workspaceFolderSchema),
});

export const fileOperationPatternKindSchema = z.union([
    z.literal('file'),
    z.literal('folder'),
]);

export const fileOperationPatternOptionsSchema = z.object({
    ignoreCase: z.boolean().optional(),
});

const fileOperationPatternSchema = z.object({
    glob: z.string(),
    matches: fileOperationPatternKindSchema.optional(),
    options: fileOperationPatternOptionsSchema.optional(),
});

export const fileCreateSchema = z.object({
    uri: z.string(),
});

export const fileRenameSchema = z.object({
    oldUri: z.string(),
    newUri: z.string(),
});

export const fileDeleteSchema = z.object({
    uri: z.string(),
});

export const patternSchema = z.string();

export const relativePatternSchema = z.object({
    baseUri: z.union([workspaceFolderSchema, uriSchema]),
    pattern: patternSchema,
});

export const globPatternSchema = z.union([
    patternSchema,
    relativePatternSchema,
]);

export const watchKindSchema = uintegerSchema;

const fileEventSchema = z.object({
    uri: documentUriSchema,
    type: uintegerSchema,
});

export const fileChangeTypeSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
]);

export const executeCommandRegistrationOptionsSchema =
    executeCommandOptionsSchema;

export const applyWorkspaceEditParamsSchema = z.object({
    label: z.string().optional(),
    edit: workspaceEditSchema,
});

export const applyWorkspaceEditResultSchema = z.object({
    applied: z.boolean(),
    failureReason: z.string().optional(),
    failedChange: uintegerSchema.optional(),
});

export const messageTypeSchema = z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
    z.literal(4),
    z.literal(5),
]);

const messageActionItemSchema = z.object({
    title: z.string(),
});

export const showDocumentParamsSchema = z.object({
    uri: uriSchema,
    external: z.boolean().optional(),
    takeFocus: z.boolean().optional(),
    selection: rangeSchema.optional(),
});

export const showDocumentResultSchema = z.object({
    success: z.boolean(),
});

const logMessageParamsSchema = z.object({
    type: messageTypeSchema,
    message: z.string(),
});

export const workDoneProgressCreateParamsSchema = z.object({
    token: progressTokenSchema,
});

export const workDoneProgressCancelParamsSchema = z.object({
    token: progressTokenSchema,
});

const responseMessageSchema = messageSchema.extend({
    id: z.union([integerSchema, z.string()]).nullable(),
    result: z
        .union([z.string(), z.number(), z.boolean(), arraySchema, z.any()])
        .optional()
        .nullable(),
    error: responseErrorSchema.optional(),
});

export const diagnosticSchema = z.object({
    range: rangeSchema,
    severity: diagnosticSeveritySchema.optional(),
    code: z.union([integerSchema, z.string()]).optional(),
    codeDescription: codeDescriptionSchema.optional(),
    source: z.string().optional(),
    message: z.string(),
    tags: z.array(diagnosticTagSchema).optional(),
    relatedInformation: z.array(diagnosticRelatedInformationSchema).optional(),
    data: z.unknown().optional(),
});

export const workspaceEditClientCapabilitiesSchema = z.object({
    documentChanges: z.boolean().optional(),
    resourceOperations: z.array(resourceOperationKindSchema).optional(),
    failureHandling: failureHandlingKindSchema.optional(),
    normalizesLineEndings: z.boolean().optional(),
    changeAnnotationSupport: z
        .object({
            groupsOnLabel: z.boolean().optional(),
        })
        .optional(),
});

export const completionClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    completionItem: z
        .object({
            snippetSupport: z.boolean().optional(),
            commitCharactersSupport: z.boolean().optional(),
            documentationFormat: z.array(markupKindSchema).optional(),
            deprecatedSupport: z.boolean().optional(),
            preselectSupport: z.boolean().optional(),
            tagSupport: z
                .object({
                    valueSet: z.array(completionItemTagSchema),
                })
                .optional(),
            insertReplaceSupport: z.boolean().optional(),
            resolveSupport: z
                .object({
                    properties: z.array(z.string()),
                })
                .optional(),
            insertTextModeSupport: z
                .object({
                    valueSet: z.array(insertTextModeSchema),
                })
                .optional(),
            labelDetailsSupport: z.boolean().optional(),
        })
        .optional(),
    completionItemKind: z
        .object({
            valueSet: z.array(completionItemKindSchema).optional(),
        })
        .optional(),
    contextSupport: z.boolean().optional(),
    insertTextMode: insertTextModeSchema.optional(),
    completionList: z
        .object({
            itemDefaults: z.array(z.string()).optional(),
        })
        .optional(),
});

export const documentSymbolClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    symbolKind: z
        .object({
            valueSet: z.array(symbolKindSchema).optional(),
        })
        .optional(),
    hierarchicalDocumentSymbolSupport: z.boolean().optional(),
    tagSupport: z
        .object({
            valueSet: z.array(symbolTagSchema),
        })
        .optional(),
    labelSupport: z.boolean().optional(),
});

export const codeActionClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    codeActionLiteralSupport: z
        .object({
            codeActionKind: z.object({
                valueSet: z.array(codeActionKindSchema),
            }),
        })
        .optional(),
    isPreferredSupport: z.boolean().optional(),
    disabledSupport: z.boolean().optional(),
    dataSupport: z.boolean().optional(),
    resolveSupport: z
        .object({
            properties: z.array(z.string()),
        })
        .optional(),
    honorsChangeAnnotations: z.boolean().optional(),
});

export const renameClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    prepareSupport: z.boolean().optional(),
    prepareSupportDefaultBehavior:
        prepareSupportDefaultBehaviorSchema.optional(),
    honorsChangeAnnotations: z.boolean().optional(),
});

export const foldingRangeClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    rangeLimit: uintegerSchema.optional(),
    lineFoldingOnly: z.boolean().optional(),
    foldingRangeKind: z
        .object({
            valueSet: z.array(foldingRangeKindSchema).optional(),
        })
        .optional(),
    foldingRange: z
        .object({
            collapsedText: z.boolean().optional(),
        })
        .optional(),
});

const semanticTokensClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    requests: z.object({
        range: z.union([z.boolean(), z.object({})]).optional(),
        full: z
            .union([
                z.boolean(),
                z.object({
                    delta: z.boolean().optional(),
                }),
            ])
            .optional(),
    }),
    tokenTypes: z.array(z.string()),
    tokenModifiers: z.array(z.string()),
    formats: z.array(tokenFormatSchema),
    overlappingTokenSupport: z.boolean().optional(),
    multilineTokenSupport: z.boolean().optional(),
    serverCancelSupport: z.boolean().optional(),
    augmentsSyntaxTokens: z.boolean().optional(),
});

export const notebookDocumentClientCapabilitiesSchema = z.object({
    synchronization: notebookDocumentSyncClientCapabilitiesSchema,
});

const workspaceSymbolClientCapabilitiesSchema = z.object({
    dynamicRegistration: z.boolean().optional(),
    symbolKind: z
        .object({
            valueSet: z.array(symbolKindSchema).optional(),
        })
        .optional(),
    tagSupport: z
        .object({
            valueSet: z.array(symbolTagSchema),
        })
        .optional(),
    resolveSupport: z
        .object({
            properties: z.array(z.string()),
        })
        .optional(),
});

export const textDocumentSyncOptionsSchema = z.object({
    openClose: z.boolean().optional(),
    change: textDocumentSyncKindSchema.optional(),
    willSave: z.boolean().optional(),
    willSaveWaitUntil: z.boolean().optional(),
    save: z.union([z.boolean(), saveOptionsSchema]).optional(),
});

export const notebookDocumentSyncOptionsSchema = z.object({
    notebookSelector: z.array(
        z.union([
            z.object({
                notebook: z.union([z.string(), notebookDocumentFilterSchema]),
                cells: z
                    .array(
                        z.object({
                            language: z.string(),
                        })
                    )
                    .optional(),
            }),
            z.object({
                notebook: z
                    .union([z.string(), notebookDocumentFilterSchema])
                    .optional(),
                cells: z.array(
                    z.object({
                        language: z.string(),
                    })
                ),
            }),
        ])
    ),
    save: z.boolean().optional(),
});

export const notebookDocumentSyncRegistrationOptionsSchema =
    notebookDocumentSyncOptionsSchema.extend(
        staticRegistrationOptionsSchema.shape
    );

export const declarationRegistrationOptionsSchema = declarationOptionsSchema
    .extend(textDocumentRegistrationOptionsSchema.shape)
    .extend(staticRegistrationOptionsSchema.shape);

export const typeDefinitionRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(typeDefinitionOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const implementationRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(implementationOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const codeActionOptionsSchema = workDoneProgressOptionsSchema.extend({
    codeActionKinds: z.array(codeActionKindSchema).optional(),
    resolveProvider: z.boolean().optional(),
});

export const documentColorRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(staticRegistrationOptionsSchema.shape)
        .extend(documentColorOptionsSchema.shape);

export const foldingRangeRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(foldingRangeOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const selectionRangeRegistrationOptionsSchema =
    selectionRangeOptionsSchema
        .extend(textDocumentRegistrationOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const linkedEditingRangeRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(linkedEditingRangeOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const callHierarchyRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(callHierarchyOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const semanticTokensOptionsSchema = workDoneProgressOptionsSchema.extend(
    {
        legend: semanticTokensLegendSchema,
        range: z.union([z.boolean(), z.object({})]).optional(),
        full: z
            .union([
                z.boolean(),
                z.object({
                    delta: z.boolean().optional(),
                }),
            ])
            .optional(),
    }
);

export const semanticTokensRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(semanticTokensOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const monikerRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(monikerOptionsSchema.shape);

export const typeHierarchyRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(typeHierarchyOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

export const inlineValueRegistrationOptionsSchema = inlineValueOptionsSchema
    .extend(textDocumentRegistrationOptionsSchema.shape)
    .extend(staticRegistrationOptionsSchema.shape);

export const inlayHintRegistrationOptionsSchema = inlayHintOptionsSchema
    .extend(textDocumentRegistrationOptionsSchema.shape)
    .extend(staticRegistrationOptionsSchema.shape);

export const diagnosticRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema
        .extend(diagnosticOptionsSchema.shape)
        .extend(staticRegistrationOptionsSchema.shape);

const didChangeTextDocumentParamsSchema = z.object({
    textDocument: versionedTextDocumentIdentifierSchema,
    contentChanges: z.array(textDocumentContentChangeEventSchema),
});

export const willSaveTextDocumentParamsSchema = z.object({
    textDocument: textDocumentIdentifierSchema,
    reason: textDocumentSaveReasonSchema,
});

export const notebookCellTextDocumentFilterSchema = z.object({
    notebook: z.union([z.string(), notebookDocumentFilterSchema]),
    language: z.string().optional(),
});

export const didSaveNotebookDocumentParamsSchema = z.object({
    notebookDocument: notebookDocumentIdentifierSchema,
});

export const referenceParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape)
    .extend({
        context: referenceContextSchema,
    });

export const callHierarchyItemSchema = z.object({
    name: z.string(),
    kind: symbolKindSchema,
    tags: z.array(symbolTagSchema).optional(),
    detail: z.string().optional(),
    uri: documentUriSchema,
    range: rangeSchema,
    selectionRange: rangeSchema,
    data: z.unknown().optional(),
});

export const callHierarchyIncomingCallsParamsSchema =
    workDoneProgressParamsSchema
        .extend(partialResultParamsSchema.shape)
        .extend({
            item: callHierarchyItemSchema,
        });

export const callHierarchyIncomingCallSchema = z.object({
    from: callHierarchyItemSchema,
    fromRanges: z.array(rangeSchema),
});

export const callHierarchyOutgoingCallsParamsSchema =
    workDoneProgressParamsSchema
        .extend(partialResultParamsSchema.shape)
        .extend({
            item: callHierarchyItemSchema,
        });

export const callHierarchyOutgoingCallSchema = z.object({
    to: callHierarchyItemSchema,
    fromRanges: z.array(rangeSchema),
});

export const documentHighlightSchema = z.object({
    range: rangeSchema,
    kind: documentHighlightKindSchema.optional(),
});

export const hoverSchema = z.object({
    contents: z.union([
        markedStringSchema,
        z.array(markedStringSchema),
        markupContentSchema,
    ]),
    range: rangeSchema.optional(),
});

export const semanticTokensDeltaSchema = z.object({
    resultId: z.string().optional(),
    edits: z.array(semanticTokensEditSchema),
});

export const inlineValueParamsSchema = workDoneProgressParamsSchema.extend({
    textDocument: textDocumentIdentifierSchema,
    range: rangeSchema,
    context: inlineValueContextSchema,
});

export const completionContextSchema = z.object({
    triggerKind: completionTriggerKindSchema,
    triggerCharacter: z.string().optional(),
});

const publishDiagnosticsParamsSchema = z.object({
    uri: documentUriSchema,
    version: integerSchema.optional(),
    diagnostics: z.array(diagnosticSchema),
});

export const workspaceDiagnosticParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        identifier: z.string().optional(),
        previousResultIds: z.array(previousResultIdSchema),
    });

export const signatureInformationSchema = z.object({
    label: z.string(),
    documentation: z.union([z.string(), markupContentSchema]).optional(),
    parameters: z.array(parameterInformationSchema).optional(),
    activeParameter: uintegerSchema.optional(),
});

export const codeActionRegistrationOptionsSchema =
    textDocumentRegistrationOptionsSchema.extend(codeActionOptionsSchema.shape);

export const codeActionContextSchema = z.object({
    diagnostics: z.array(diagnosticSchema),
    only: z.array(codeActionKindSchema).optional(),
    triggerKind: codeActionTriggerKindSchema.optional(),
});

const colorInformationSchema = z.object({
    range: rangeSchema,
    color: colorSchema,
});

const documentFormattingParamsSchema = workDoneProgressParamsSchema.extend({
    textDocument: textDocumentIdentifierSchema,
    options: formattingOptionsSchema,
});

export const configurationParamsSchema = z.object({
    items: z.array(configurationItemSchema),
});

export const didChangeWorkspaceFoldersParamsSchema = z.object({
    event: workspaceFoldersChangeEventSchema,
});

export const fileOperationFilterSchema = z.object({
    scheme: z.string().optional(),
    pattern: fileOperationPatternSchema,
});

export const createFilesParamsSchema = z.object({
    files: z.array(fileCreateSchema),
});

export const renameFilesParamsSchema = z.object({
    files: z.array(fileRenameSchema),
});

export const deleteFilesParamsSchema = z.object({
    files: z.array(fileDeleteSchema),
});

export const fileSystemWatcherSchema = z.object({
    globPattern: globPatternSchema,
    kind: watchKindSchema.optional(),
});

const didChangeWatchedFilesParamsSchema = z.object({
    changes: z.array(fileEventSchema),
});

const showMessageParamsSchema = z.object({
    type: messageTypeSchema,
    message: z.string(),
});

const showMessageRequestParamsSchema = z.object({
    type: messageTypeSchema,
    message: z.string(),
    actions: z.array(messageActionItemSchema).optional(),
});

export const textDocumentClientCapabilitiesSchema = z.object({
    synchronization: textDocumentSyncClientCapabilitiesSchema.optional(),
    completion: completionClientCapabilitiesSchema.optional(),
    hover: hoverClientCapabilitiesSchema.optional(),
    signatureHelp: signatureHelpClientCapabilitiesSchema.optional(),
    declaration: declarationClientCapabilitiesSchema.optional(),
    definition: definitionClientCapabilitiesSchema.optional(),
    typeDefinition: typeDefinitionClientCapabilitiesSchema.optional(),
    implementation: implementationClientCapabilitiesSchema.optional(),
    references: referenceClientCapabilitiesSchema.optional(),
    documentHighlight: documentHighlightClientCapabilitiesSchema.optional(),
    documentSymbol: documentSymbolClientCapabilitiesSchema.optional(),
    codeAction: codeActionClientCapabilitiesSchema.optional(),
    codeLens: codeLensClientCapabilitiesSchema.optional(),
    documentLink: documentLinkClientCapabilitiesSchema.optional(),
    colorProvider: documentColorClientCapabilitiesSchema.optional(),
    formatting: documentFormattingClientCapabilitiesSchema.optional(),
    rangeFormatting: documentRangeFormattingClientCapabilitiesSchema.optional(),
    onTypeFormatting:
        documentOnTypeFormattingClientCapabilitiesSchema.optional(),
    rename: renameClientCapabilitiesSchema.optional(),
    publishDiagnostics: publishDiagnosticsClientCapabilitiesSchema.optional(),
    foldingRange: foldingRangeClientCapabilitiesSchema.optional(),
    selectionRange: selectionRangeClientCapabilitiesSchema.optional(),
    linkedEditingRange: linkedEditingRangeClientCapabilitiesSchema.optional(),
    callHierarchy: callHierarchyClientCapabilitiesSchema.optional(),
    semanticTokens: semanticTokensClientCapabilitiesSchema.optional(),
    moniker: monikerClientCapabilitiesSchema.optional(),
    typeHierarchy: typeHierarchyClientCapabilitiesSchema.optional(),
    inlineValue: inlineValueClientCapabilitiesSchema.optional(),
    inlayHint: inlayHintClientCapabilitiesSchema.optional(),
    diagnostic: diagnosticClientCapabilitiesSchema.optional(),
});

const fileOperationRegistrationOptionsSchema = z.object({
    filters: z.array(fileOperationFilterSchema),
});

export const completionParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend(partialResultParamsSchema.shape)
    .extend({
        context: completionContextSchema.optional(),
    });

export const signatureHelpSchema = z.object({
    signatures: z.array(signatureInformationSchema),
    activeSignature: uintegerSchema.optional(),
    activeParameter: uintegerSchema.optional(),
});

export const codeActionParamsSchema = workDoneProgressParamsSchema
    .extend(partialResultParamsSchema.shape)
    .extend({
        textDocument: textDocumentIdentifierSchema,
        range: rangeSchema,
        context: codeActionContextSchema,
    });

export const didChangeWatchedFilesRegistrationOptionsSchema = z.object({
    watchers: z.array(fileSystemWatcherSchema),
});

export const signatureHelpContextSchema = z.object({
    triggerKind: signatureHelpTriggerKindSchema,
    triggerCharacter: z.string().optional(),
    isRetrigger: z.boolean(),
    activeSignatureHelp: signatureHelpSchema.optional(),
});

export const signatureHelpParamsSchema = textDocumentPositionParamsSchema
    .extend(workDoneProgressParamsSchema.shape)
    .extend({
        context: signatureHelpContextSchema.optional(),
    });

export const lSPAnySchema: z.ZodSchema<LSPAny> = z.lazy(() =>
    z
        .union([
            lSPObjectSchema,
            lSPArraySchema,
            z.string(),
            integerSchema,
            uintegerSchema,
            decimalSchema,
            z.boolean(),
        ])
        .nullable()
);

export const lSPObjectSchema: z.ZodSchema<LSPObject> = z.lazy(() =>
    z.record(lSPAnySchema)
);

export const lSPArraySchema: z.ZodSchema<LSPArray> = z.lazy(() =>
    z.array(lSPAnySchema)
);

export const commandSchema: z.ZodSchema<Command> = z.lazy(() =>
    z.object({
        title: z.string(),
        command: z.string(),
        arguments: z.array(lSPAnySchema).optional(),
    })
);

export const initializeParamsSchema: z.ZodSchema<InitializeParams> = z.lazy(
    () =>
        workDoneProgressParamsSchema.extend({
            processId: integerSchema.nullable(),
            clientInfo: z
                .object({
                    name: z.string(),
                    version: z.string().optional(),
                })
                .optional(),
            locale: z.string().optional(),
            rootPath: z.string().optional().nullable(),
            rootUri: documentUriSchema.nullable(),
            initializationOptions: lSPAnySchema.optional(),
            capabilities: clientCapabilitiesSchema,
            trace: traceValueSchema.optional(),
            workspaceFolders: z
                .array(workspaceFolderSchema)
                .optional()
                .nullable(),
        })
);

const clientCapabilitiesSchema: z.ZodSchema<ClientCapabilities> = z.lazy(() =>
    z.object({
        workspace: z
            .object({
                applyEdit: z.boolean().optional(),
                workspaceEdit: workspaceEditClientCapabilitiesSchema.optional(),
                didChangeConfiguration:
                    didChangeConfigurationClientCapabilitiesSchema.optional(),
                didChangeWatchedFiles:
                    didChangeWatchedFilesClientCapabilitiesSchema.optional(),
                symbol: workspaceSymbolClientCapabilitiesSchema.optional(),
                executeCommand:
                    executeCommandClientCapabilitiesSchema.optional(),
                workspaceFolders: z.boolean().optional(),
                configuration: z.boolean().optional(),
                semanticTokens:
                    semanticTokensWorkspaceClientCapabilitiesSchema.optional(),
                codeLens: codeLensWorkspaceClientCapabilitiesSchema.optional(),
                fileOperations: z
                    .object({
                        dynamicRegistration: z.boolean().optional(),
                        didCreate: z.boolean().optional(),
                        willCreate: z.boolean().optional(),
                        didRename: z.boolean().optional(),
                        willRename: z.boolean().optional(),
                        didDelete: z.boolean().optional(),
                        willDelete: z.boolean().optional(),
                    })
                    .optional(),
                inlineValue:
                    inlineValueWorkspaceClientCapabilitiesSchema.optional(),
                inlayHint:
                    inlayHintWorkspaceClientCapabilitiesSchema.optional(),
                diagnostics:
                    diagnosticWorkspaceClientCapabilitiesSchema.optional(),
            })
            .optional(),
        textDocument: textDocumentClientCapabilitiesSchema.optional(),
        notebookDocument: notebookDocumentClientCapabilitiesSchema.optional(),
        window: z
            .object({
                workDoneProgress: z.boolean().optional(),
                showMessage:
                    showMessageRequestClientCapabilitiesSchema.optional(),
                showDocument: showDocumentClientCapabilitiesSchema.optional(),
            })
            .optional(),
        general: z
            .object({
                staleRequestSupport: z
                    .object({
                        cancel: z.boolean(),
                        retryOnContentModified: z.array(z.string()),
                    })
                    .optional(),
                regularExpressions:
                    regularExpressionsClientCapabilitiesSchema.optional(),
                markdown: markdownClientCapabilitiesSchema.optional(),
                positionEncodings: z
                    .array(positionEncodingKindSchema)
                    .optional(),
            })
            .optional(),
        experimental: lSPAnySchema.optional(),
    })
);

export const initializeResultSchema: z.ZodSchema<InitializeResult> = z.lazy(
    () =>
        z.object({
            capabilities: serverCapabilitiesSchema,
            serverInfo: z
                .object({
                    name: z.string(),
                    version: z.string().optional(),
                })
                .optional(),
        })
);

const serverCapabilitiesSchema: z.ZodSchema<ServerCapabilities> = z.lazy(() =>
    z.object({
        positionEncoding: positionEncodingKindSchema.optional(),
        textDocumentSync: z
            .union([textDocumentSyncOptionsSchema, textDocumentSyncKindSchema])
            .optional(),
        notebookDocumentSync: z
            .union([
                notebookDocumentSyncOptionsSchema,
                notebookDocumentSyncRegistrationOptionsSchema,
            ])
            .optional(),
        completionProvider: completionOptionsSchema.optional(),
        hoverProvider: z.union([z.boolean(), hoverOptionsSchema]).optional(),
        signatureHelpProvider: signatureHelpOptionsSchema.optional(),
        declarationProvider: z
            .union([
                z.boolean(),
                declarationOptionsSchema,
                declarationRegistrationOptionsSchema,
            ])
            .optional(),
        definitionProvider: z
            .union([z.boolean(), definitionOptionsSchema])
            .optional(),
        typeDefinitionProvider: z
            .union([
                z.boolean(),
                typeDefinitionOptionsSchema,
                typeDefinitionRegistrationOptionsSchema,
            ])
            .optional(),
        implementationProvider: z
            .union([
                z.boolean(),
                implementationOptionsSchema,
                implementationRegistrationOptionsSchema,
            ])
            .optional(),
        referencesProvider: z
            .union([z.boolean(), referenceOptionsSchema])
            .optional(),
        documentHighlightProvider: z
            .union([z.boolean(), documentHighlightOptionsSchema])
            .optional(),
        documentSymbolProvider: z
            .union([z.boolean(), documentSymbolOptionsSchema])
            .optional(),
        codeActionProvider: z
            .union([z.boolean(), codeActionOptionsSchema])
            .optional(),
        codeLensProvider: codeLensOptionsSchema.optional(),
        documentLinkProvider: documentLinkOptionsSchema.optional(),
        colorProvider: z
            .union([
                z.boolean(),
                documentColorOptionsSchema,
                documentColorRegistrationOptionsSchema,
            ])
            .optional(),
        documentFormattingProvider: z
            .union([z.boolean(), documentFormattingOptionsSchema])
            .optional(),
        documentRangeFormattingProvider: z
            .union([z.boolean(), documentRangeFormattingOptionsSchema])
            .optional(),
        documentOnTypeFormattingProvider:
            documentOnTypeFormattingOptionsSchema.optional(),
        renameProvider: z.union([z.boolean(), renameOptionsSchema]).optional(),
        foldingRangeProvider: z
            .union([
                z.boolean(),
                foldingRangeOptionsSchema,
                foldingRangeRegistrationOptionsSchema,
            ])
            .optional(),
        executeCommandProvider: executeCommandOptionsSchema.optional(),
        selectionRangeProvider: z
            .union([
                z.boolean(),
                selectionRangeOptionsSchema,
                selectionRangeRegistrationOptionsSchema,
            ])
            .optional(),
        linkedEditingRangeProvider: z
            .union([
                z.boolean(),
                linkedEditingRangeOptionsSchema,
                linkedEditingRangeRegistrationOptionsSchema,
            ])
            .optional(),
        callHierarchyProvider: z
            .union([
                z.boolean(),
                callHierarchyOptionsSchema,
                callHierarchyRegistrationOptionsSchema,
            ])
            .optional(),
        semanticTokensProvider: z
            .union([
                semanticTokensOptionsSchema,
                semanticTokensRegistrationOptionsSchema,
            ])
            .optional(),
        monikerProvider: z
            .union([
                z.boolean(),
                monikerOptionsSchema,
                monikerRegistrationOptionsSchema,
            ])
            .optional(),
        typeHierarchyProvider: z
            .union([
                z.boolean(),
                typeHierarchyOptionsSchema,
                typeHierarchyRegistrationOptionsSchema,
            ])
            .optional(),
        inlineValueProvider: z
            .union([
                z.boolean(),
                inlineValueOptionsSchema,
                inlineValueRegistrationOptionsSchema,
            ])
            .optional(),
        inlayHintProvider: z
            .union([
                z.boolean(),
                inlayHintOptionsSchema,
                inlayHintRegistrationOptionsSchema,
            ])
            .optional(),
        diagnosticProvider: z
            .union([
                diagnosticOptionsSchema,
                diagnosticRegistrationOptionsSchema,
            ])
            .optional(),
        workspaceSymbolProvider: z
            .union([z.boolean(), workspaceSymbolOptionsSchema])
            .optional(),
        workspace: z
            .object({
                workspaceFolders:
                    workspaceFoldersServerCapabilitiesSchema.optional(),
                fileOperations: z
                    .object({
                        didCreate:
                            fileOperationRegistrationOptionsSchema.optional(),
                        willCreate:
                            fileOperationRegistrationOptionsSchema.optional(),
                        didRename:
                            fileOperationRegistrationOptionsSchema.optional(),
                        willRename:
                            fileOperationRegistrationOptionsSchema.optional(),
                        didDelete:
                            fileOperationRegistrationOptionsSchema.optional(),
                        willDelete:
                            fileOperationRegistrationOptionsSchema.optional(),
                    })
                    .optional(),
            })
            .optional(),
        experimental: lSPAnySchema.optional(),
    })
);

export const registrationSchema: z.ZodSchema<Registration> = z.lazy(() =>
    z.object({
        id: z.string(),
        method: z.string(),
        registerOptions: lSPAnySchema.optional(),
    })
);

export const registrationParamsSchema: z.ZodSchema<RegistrationParams> = z.lazy(
    () =>
        z.object({
            registrations: z.array(registrationSchema),
        })
);

export const notebookDocumentSchema: z.ZodSchema<NotebookDocument> = z.lazy(
    () =>
        z.object({
            uri: uriSchema,
            notebookType: z.string(),
            version: integerSchema,
            metadata: lSPObjectSchema.optional(),
            cells: z.array(notebookCellSchema),
        })
);

export const notebookCellSchema: z.ZodSchema<NotebookCell> = z.lazy(() =>
    z.object({
        kind: notebookCellKindSchema,
        document: documentUriSchema,
        metadata: lSPObjectSchema.optional(),
        executionSummary: executionSummarySchema.optional(),
    })
);

export const didOpenNotebookDocumentParamsSchema: z.ZodSchema<DidOpenNotebookDocumentParams> =
    z.lazy(() =>
        z.object({
            notebookDocument: notebookDocumentSchema,
            cellTextDocuments: z.array(textDocumentItemSchema),
        })
    );

export const didChangeNotebookDocumentParamsSchema: z.ZodSchema<DidChangeNotebookDocumentParams> =
    z.lazy(() =>
        z.object({
            notebookDocument: versionedNotebookDocumentIdentifierSchema,
            change: notebookDocumentChangeEventSchema,
        })
    );

export const notebookDocumentChangeEventSchema: z.ZodSchema<NotebookDocumentChangeEvent> =
    z.lazy(() =>
        z.object({
            metadata: lSPObjectSchema.optional(),
            cells: z
                .object({
                    structure: z
                        .object({
                            array: notebookCellArrayChangeSchema,
                            didOpen: z.array(textDocumentItemSchema).optional(),
                            didClose: z
                                .array(textDocumentIdentifierSchema)
                                .optional(),
                        })
                        .optional(),
                    data: z.array(notebookCellSchema).optional(),
                    textContent: z
                        .array(
                            z.object({
                                document: versionedTextDocumentIdentifierSchema,
                                changes: z.array(
                                    textDocumentContentChangeEventSchema
                                ),
                            })
                        )
                        .optional(),
                })
                .optional(),
        })
    );

export const notebookCellArrayChangeSchema: z.ZodSchema<NotebookCellArrayChange> =
    z.lazy(() =>
        z.object({
            start: uintegerSchema,
            deleteCount: uintegerSchema,
            cells: z.array(notebookCellSchema).optional(),
        })
    );

export const typeHierarchyItemSchema: z.ZodSchema<TypeHierarchyItem> = z.lazy(
    () =>
        z.object({
            name: z.string(),
            kind: symbolKindSchema,
            tags: z.array(symbolTagSchema).optional(),
            detail: z.string().optional(),
            uri: documentUriSchema,
            range: rangeSchema,
            selectionRange: rangeSchema,
            data: lSPAnySchema.optional(),
        })
);

export const typeHierarchySupertypesParamsSchema: z.ZodSchema<TypeHierarchySupertypesParams> =
    z.lazy(() =>
        workDoneProgressParamsSchema
            .extend(partialResultParamsSchema.shape)
            .extend({
                item: typeHierarchyItemSchema,
            })
    );

export const typeHierarchySubtypesParamsSchema: z.ZodSchema<TypeHierarchySubtypesParams> =
    z.lazy(() =>
        workDoneProgressParamsSchema
            .extend(partialResultParamsSchema.shape)
            .extend({
                item: typeHierarchyItemSchema,
            })
    );

const documentLinkSchema: z.ZodSchema<DocumentLink> = z.lazy(() =>
    z.object({
        range: rangeSchema,
        target: uriSchema.optional(),
        tooltip: z.string().optional(),
        data: lSPAnySchema.optional(),
    })
);

const codeLensSchema: z.ZodSchema<CodeLens> = z.lazy(() =>
    z.object({
        range: rangeSchema,
        command: commandSchema.optional(),
        data: lSPAnySchema.optional(),
    })
);

export const inlayHintSchema: z.ZodSchema<InlayHint> = z.lazy(() =>
    z.object({
        position: positionSchema,
        label: z.union([z.string(), z.array(inlayHintLabelPartSchema)]),
        kind: inlayHintKindSchema.optional(),
        textEdits: z.array(textEditSchema).optional(),
        tooltip: z.union([z.string(), markupContentSchema]).optional(),
        paddingLeft: z.boolean().optional(),
        paddingRight: z.boolean().optional(),
        data: lSPAnySchema.optional(),
    })
);

export const inlayHintLabelPartSchema: z.ZodSchema<InlayHintLabelPart> = z.lazy(
    () =>
        z.object({
            value: z.string(),
            tooltip: z.union([z.string(), markupContentSchema]).optional(),
            location: locationSchema.optional(),
            command: commandSchema.optional(),
        })
);

export const completionListSchema: z.ZodSchema<CompletionList> = z.lazy(() =>
    z.object({
        isIncomplete: z.boolean(),
        itemDefaults: z
            .object({
                commitCharacters: z.array(z.string()).optional(),
                editRange: z
                    .union([
                        rangeSchema,
                        z.object({
                            insert: rangeSchema,
                            replace: rangeSchema,
                        }),
                    ])
                    .optional(),
                insertTextFormat: insertTextFormatSchema.optional(),
                insertTextMode: insertTextModeSchema.optional(),
                data: lSPAnySchema.optional(),
            })
            .optional(),
        items: z.array(completionItemSchema),
    })
);

export const completionItemSchema: z.ZodSchema<CompletionItem> = z.lazy(() =>
    z.object({
        label: z.string(),
        labelDetails: completionItemLabelDetailsSchema.optional(),
        kind: completionItemKindSchema.optional(),
        tags: z.array(completionItemTagSchema).optional(),
        detail: z.string().optional(),
        documentation: z.union([z.string(), markupContentSchema]).optional(),
        deprecated: z.boolean().optional(),
        preselect: z.boolean().optional(),
        sortText: z.string().optional(),
        filterText: z.string().optional(),
        insertText: z.string().optional(),
        insertTextFormat: insertTextFormatSchema.optional(),
        insertTextMode: insertTextModeSchema.optional(),
        textEdit: z.union([textEditSchema, insertReplaceEditSchema]).optional(),
        textEditText: z.string().optional(),
        additionalTextEdits: z.array(textEditSchema).optional(),
        commitCharacters: z.array(z.string()).optional(),
        command: commandSchema.optional(),
        data: lSPAnySchema.optional(),
    })
);

export const codeActionSchema: z.ZodSchema<CodeAction> = z.lazy(() =>
    z.object({
        title: z.string(),
        kind: codeActionKindSchema.optional(),
        diagnostics: z.array(diagnosticSchema).optional(),
        isPreferred: z.boolean().optional(),
        disabled: z
            .object({
                reason: z.string(),
            })
            .optional(),
        edit: workspaceEditSchema.optional(),
        command: commandSchema.optional(),
        data: lSPAnySchema.optional(),
    })
);

export const workspaceSymbolSchema: z.ZodSchema<WorkspaceSymbol> = z.lazy(() =>
    z.object({
        name: z.string(),
        kind: symbolKindSchema,
        tags: z.array(symbolTagSchema).optional(),
        containerName: z.string().optional(),
        location: z.union([
            locationSchema,
            z.object({
                uri: documentUriSchema,
            }),
        ]),
        data: lSPAnySchema.optional(),
    })
);

const didChangeConfigurationParamsSchema: z.ZodSchema<DidChangeConfigurationParams> =
    z.lazy(() =>
        z.object({
            settings: lSPAnySchema,
        })
    );

export const executeCommandParamsSchema: z.ZodSchema<ExecuteCommandParams> =
    z.lazy(() =>
        workDoneProgressParamsSchema.extend({
            command: z.string(),
            arguments: z.array(lSPAnySchema).optional(),
        })
    );
